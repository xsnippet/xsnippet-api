name: Build and Release

on:
  push:
    branches: [ master ]
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1

defaults:
  run:
    shell: bash

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.create_release.outputs.release_tag }}
    steps:
      - uses: actions/checkout@v4

      - id: create_release
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "release_tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            gh release create --generate-notes "${GITHUB_REF#refs/tags/}"
          else
            echo "release_tag=nightly" >> $GITHUB_OUTPUT
            gh release delete --cleanup-tag --yes nightly
            gh release create --generate-notes --prerelease --title "Development Build" nightly
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ env.GITHUB_REPOSITORY }}

  build_assets:
    permissions:
      id-token: write
      contents: write
      attestations: write

    needs: create_release

    strategy:
      matrix:
        os:
          - name: ubuntu-latest
            cross_compile_os: linux
            cross_compile_target: aarch64-unknown-linux-gnu
          - name: ubuntu-latest
            cross_compile_os:
            cross_compile_target:
          - name: windows-latest
            cross_compile_os:
            cross_compile_target:
          - name: macos-latest
            cross_compile_os:
            cross_compile_target:

    runs-on: ${{ matrix.os.name }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Setup PostgreSQL
        uses: ikalnytskyi/action-setup-postgres@v6

      - run: |
          if [ -z "${CROSS_COMPILE_TARGET}" ]; then
            # normal build targetting the CPU architecture and the OS of the host
            cargo build --release
          else
            # cross build with the specified rustc target
            cargo install cross
            cross build --release --target ${CROSS_COMPILE_TARGET}
          fi
        env:
          CROSS_COMPILE_TARGET: ${{ matrix.os.cross_compile_target }}

      - id: build
        run: |
          if [ -z "${CROSS_COMPILE_TARGET}" ]; then
            # normal build targetting the CPU architecture and the OS of the host
            rustc --print cfg | grep = > rustc.vars
            source rustc.vars

            pushd target/release
          else
            # cross build with the specified rustc target
            export target_os=${CROSS_COMPILE_OS}
            export target_arch=${CROSS_COMPILE_TARGET}

            pushd target/${CROSS_COMPILE_TARGET}/release
          fi

          if [ "$RUNNER_OS" == "Windows" ]; then
            export ASSET_NAME="xsnippet-api-${target_arch}-${target_os}.exe.7z"
            7z a $ASSET_NAME xsnippet-api.exe
          else
            export ASSET_NAME="xsnippet-api-${target_arch}-${target_os}.gz"
            tar cvzf $ASSET_NAME xsnippet-api
          fi
          gh release upload $RELEASE_TAG $ASSET_NAME
          popd

          echo "asset_path=target/release/$ASSET_NAME" >> $GITHUB_OUTPUT
        env:
          CROSS_COMPILE_OS: ${{ matrix.os.cross_compile_os }}
          CROSS_COMPILE_TARGET: ${{ matrix.os.cross_compile_target }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ env.GITHUB_REPOSITORY }}
          RELEASE_TAG: ${{ needs.create_release.outputs.release_tag }}

      - uses: actions/attest-build-provenance@v1
        with:
          subject-path: ${{ steps.build.outputs.asset_path }}
