name: Build and Release

on:
  push:
    branches: [ master ]
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1

defaults:
  run:
    shell: bash

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.create_release.outputs.release_tag }}
    steps:
      - uses: actions/checkout@v4

      - id: create_release
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "release_tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            gh release create --generate-notes "${GITHUB_REF#refs/tags/}"
          else
            echo "release_tag=nightly" >> $GITHUB_OUTPUT
            gh release delete --cleanup-tag --yes nightly
            gh release create --generate-notes --prerelease --title "Development Build" nightly
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ env.GITHUB_REPOSITORY }}

  build_assets:
    permissions:
      id-token: write
      contents: write
      attestations: write

    needs: create_release

    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: xsnippet-api-x86_64-linux.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: xsnippet-api-aarch64-linux.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: xsnippet-api-x86_64-windows.exe.7z
          - target: aarch64-apple-darwin
            os: macos-latest
            name: xsnippet-api-aarch64-macos.gz

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Setup PostgreSQL
        uses: ikalnytskyi/action-setup-postgres@v6

      - id: build
        run: |
          export HOST=$(rustc +nightly -Z unstable-options --print target-spec-json | jq --raw-output '."llvm-target"')
          if [ "$HOST" = "$TARGET" ]; then
            cargo build --release --target ${TARGET}
          else
            cargo install cross
            cross build --release --target ${TARGET}
          fi

          pushd target/${TARGET}/release
          if [ "$TARGET" =~ "windows" ]; then
            7z a $ASSET_NAME xsnippet-api.exe
          else
            tar cvzf $ASSET_NAME xsnippet-api
          fi
          gh release upload $RELEASE_TAG $ASSET_NAME
          popd

          echo "asset_path=$PWD/$ASSET_NAME" >> $GITHUB_OUTPUT
        env:
          ASSET_NAME: ${{ matrix.name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ env.GITHUB_REPOSITORY }}
          TARGET: ${{ matrix.target }}
          RELEASE_TAG: ${{ needs.create_release.outputs.release_tag }}

      - uses: actions/attest-build-provenance@v1
        with:
          subject-path: ${{ steps.build.outputs.asset_path }}
