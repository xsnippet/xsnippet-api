fixtures:
  - XSnippetApiWithCustomAuthProvider

tests:
  - name: create a new snippet as an unauthorized user
    POST: /v1/snippets
    request_headers:
      content-type: application/json
    data:
      title: Hello, World!
      syntax: python
      content: print('Hello, World!')
      tags:
        - spam
        - eggs
    status: 201

  - name: create a new snippet as an authorized user
    POST: /v1/snippets
    request_headers:
      authorization: Bearer $ENVIRON['TOKEN_VALID']
      content-type: application/json
    data:
      title: Hello, World!
      syntax: python
      content: print('Hello, World!')
      tags:
        - spam
        - eggs
    status: 201

  - name: try to pass an empty Authorization header
    POST: /v1/snippets
    request_headers:
      authorization: ""
      content-type: application/json
    data:
      title: Hello, World!
      syntax: python
      content: print('Hello, World!')
      tags:
        - spam
        - eggs
    status: 400

  - name: try to use an unsupported authorization type
    POST: /v1/snippets
    request_headers:
      authorization: Basic $ENVIRON['TOKEN_VALID']
      content-type: application/json
    data:
      title: Hello, World!
      syntax: python
      content: print('Hello, World!')
      tags:
        - spam
        - eggs
    status: 400

  - name: try to use an unsupported key signing algorithm
    POST: /v1/snippets
    request_headers:
      authorization: Bearer $ENVIRON['TOKEN_UNSUPPORTED_ALGORITHM']
      content-type: application/json
    data:
      title: Hello, World!
      syntax: python
      content: print('Hello, World!')
      tags:
        - spam
        - eggs
    status: 400

  - name: try to use an expired JWT
    POST: /v1/snippets
    request_headers:
      authorization: Bearer $ENVIRON['TOKEN_EXPIRED']
      content-type: application/json
    data:
      title: Hello, World!
      syntax: python
      content: print('Hello, World!')
      tags:
        - spam
        - eggs
    status: 403

  - name: try to use a JWT signed by a key which isn't known to the service
    POST: /v1/snippets
    request_headers:
      authorization: Bearer $ENVIRON['TOKEN_UNKNOWN_KEY']
      content-type: application/json
    data:
      title: Hello, World!
      syntax: python
      content: print('Hello, World!')
      tags:
        - spam
        - eggs
    status: 403

  - name: try to use a JWT issued for a different service
    POST: /v1/snippets
    request_headers:
      authorization: Bearer $ENVIRON['TOKEN_INVALID_AUDIENCE']
      content-type: application/json
    data:
      title: Hello, World!
      syntax: python
      content: print('Hello, World!')
      tags:
        - spam
        - eggs
    status: 403

  - name: try to use a JWT issued by an unexpected party
    POST: /v1/snippets
    request_headers:
      authorization: Bearer $ENVIRON['TOKEN_INVALID_ISSUER']
      content-type: application/json
    data:
      title: Hello, World!
      syntax: python
      content: print('Hello, World!')
      tags:
        - spam
        - eggs
    status: 403
